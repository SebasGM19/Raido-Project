/*
 * init_config.c
 *
 *  Created on: Feb 4, 2024
 *      Author: Sebastian G.M.
 */

#include "init_config.h"

State_Control_t GPIO_DigitalRead(Set_Port_t Port_define, Pin_number_t Pin_defined){

	uint32_t const volatile * const PORT_REG_INPUT = (uint32_t const volatile *const)(Port_define + GPIOx_IDR_OFFSET); //agregamos el 10 para decirle el offset

	if(((1<<Pin_defined) & (*PORT_REG_INPUT))==(1<<Pin_defined)){
		return High;
	}
	return Low;
}

State_Control_t GPIO_DigitalWrite(Set_Port_t Port_define, Pin_number_t Pin_defined, State_Control_t State){

	uint32_t volatile *PORT_REG_OUTPUT = (uint32_t volatile*)(Port_define + GPIOx_ODR_OFFSET); //agregamos el 0x14 par indicar output

	if(State){
		*PORT_REG_OUTPUT |= (1<<Pin_defined);
	}else{
		*PORT_REG_OUTPUT &= ~(1<<Pin_defined);

	}

	return State;

}

Status_code_t ClockEnable(Set_Port_t Port_define, Enabled_Disabled_t Intention){
	Status_code_t status=Success;
	uint32_t volatile *pClockControlReg = (uint32_t volatile *)(RCC_ADDRESS + RCC_OFFSET_AHB1ENR);

	if(Intention){
		switch(Port_define){
			case Port_A:
				*pClockControlReg |= (Enabled<<Clk_PortA);
				status = Success;
				break;
			case Port_B:
				*pClockControlReg |= (Enabled<<Clk_PortB);
				status = Success;
				break;
			case Port_C:
				*pClockControlReg |= (Enabled<<Clk_PortC);
				status = Success;
				break;
			case Port_D:
				*pClockControlReg |= (Enabled<<Clk_PortD);
				status = Success;
				break;
			default:
				status = ClockNotSupported;
				break;

		}

	}else if (Intention == Disabled){

		switch(Port_define){
			case Port_A:
				*pClockControlReg &= ~(Enabled<<Clk_PortA);
				status = Success;
				break;
			case Port_B:
				*pClockControlReg &= ~(Enabled<<Clk_PortB);
				status = Success;
				break;
			case Port_C:
				*pClockControlReg &= ~(Enabled<<Clk_PortC);
				status = Success;
				break;
			case Port_D:
				*pClockControlReg &= ~(Enabled<<Clk_PortD);
				status = Success;
				break;
			default:
				status = ClockNotSupported;
				break;
		}
	}else{
		status = WrongParameter;
	}

	return status;

}

Status_code_t SetPinMode(Set_Port_t Port_define, Pin_number_t Pin_defined, PinMode_t Mode){

	uint32_t volatile *pPort_ModeReg = (uint32_t volatile *)((Port_define)+ OFFSET_PORTS);
	uint16_t volatile PositionsOfPin =0;
	Status_code_t status=Success;

	/*DO NOT MODIFY THIS IF STATEMENT, IMPLEMENTED TO AVOID TROUBLES WITH THE BOARD!!!*/
	if((Port_define == Port_A && (Pin_defined ==Pin_13 || Pin_defined ==Pin_14 || Pin_defined ==Pin_2|| Pin_defined ==Pin_3))
	|| (Port_define == Port_C && (Pin_defined ==Pin_14 || Pin_defined == Pin_15))
	|| (Port_define == Port_D && Pin_defined != Pin_2)
	|| (Port_define == Port_B && Pin_defined == Pin_11)){

		return PinNotAvailable;
	}

	status = ClockEnable(Port_define, Enabled);

	PositionsOfPin = Pin_defined*2;
	*pPort_ModeReg &= ~(Clear_two_bits<<PositionsOfPin);

	if(Mode == Output){
		*pPort_ModeReg |= (Output<<PositionsOfPin);

	}else if(Mode==Input) {
		*pPort_ModeReg &= ~(Clear_two_bits<<PositionsOfPin); //si es input simplemente limpiara esas posiciones a 00

	}else if(Mode == Alt_func_mode){
		*pPort_ModeReg |= (Alt_func_mode<<PositionsOfPin);

	}else{
		*pPort_ModeReg |= (Analog_mode<<PositionsOfPin);

	}

	return status;
}

/*
 * In this function set to output mode the first 8 GPIOS of the option port selected
 * the purpouse of this is to use is to bipolar motor which needs 4 GPIOS,
 * in this case it is posible to connect 2 bipolar motor at the same time
 */
Status_code_t GPIO_SET_Output_Byte(Output_Byte_Option_t Configuration){//with this function

	Status_code_t status;
	if(Configuration != Op_PortB && Configuration != Op_PortC){
		return OptionNotSupported;
	}

	uint32_t volatile *pPort_ModeReg = (uint32_t volatile *)(Configuration+ OFFSET_PORTS);

	status = ClockEnable(Configuration, Enabled);
	*pPort_ModeReg &= ~(0xFF); //limpiamos esos bits
	*pPort_ModeReg |= 0x5555;// equal to : 0101 0101 0101 0101

//	uint16_t volatile PositionsOfPin =0;
//	for(uint8_t pin_output =0; pin_output<8; pin_output++){
//		PositionsOfPin = pin_output*2;
//		*pPort_ModeReg |= (Output<<PositionsOfPin);
//	}
	return status;

}

Status_code_t GPIO_Write_Byte(Output_Byte_Option_t Configuration, uint8_t secuence){


	if(Configuration != Op_PortB && Configuration != Op_PortC){
		return OptionNotSupported;
	}

	uint32_t volatile *PORT_REG_OUTPUT = (uint32_t volatile*)(Configuration + GPIOx_ODR_OFFSET); //agregamos el 0x14 par indicar output
	*PORT_REG_OUTPUT &= ~(0xFF);
	*PORT_REG_OUTPUT |= secuence;

//	uint8_t bit_state=0;
//	for(uint8_t pin_position =0; pin_position<8; pin_position++){
//		bit_state = ((secuence)>>pin_position) & 1;
//		GPIO_DigitalWrite(Configuration, pin_position, bit_state);
//	}
	return Success;

}

Status_code_t GpioPullUpDownState(Set_Port_t Port_define, Pin_number_t Pin_defined, GPIO_UP_DOWN_STATE_t GPIO_State){
	uint32_t volatile *REG_PULL_UPdown = (uint32_t volatile*)(Port_define + GPIOx_PUPDR_OFFSET); //add 0x0C for offset to pull up or pull down
	uint16_t RealPosition=0;

	RealPosition = Pin_defined*2;

	*REG_PULL_UPdown &= ~(Clear_two_bits<<RealPosition); //limpiamos esa posicion del bit
	*REG_PULL_UPdown |= (GPIO_State<<RealPosition); //set the state in to pull
	return Success;

}


Status_code_t Delay(uint32_t Miliseconds){

	uint64_t count =0;
	uint64_t volatile time = 0;

	if(Miliseconds >= 1000000){
		return DelayTimeNotSupported;
	}
	count= Miliseconds*2022;

	while(time<count){
		time++;
	}
	time =0;
	count =0;

	return Success;
}
